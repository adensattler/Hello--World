There are three different ways to provision cloud resources:
    1. GUI (AWS' horrid UI!!)
        - Where everyone starts in the cloud! Easy to access everything a cloud platform has to offer.
    2. API/CLI (Don't need the GUI but still takes a good while to learn)
        - easier to interact with programmatically but can still do everything
    3. IaC (Terraform! Make provisioning )
        - Allows you to define your Infrastructure within your codebase
        - You know exactly what is provisioned, what the current state is, what you have deployed, and make copies of resources!


What is Infrastructure as Code (IaC)?
    1. Ad hoc scripts
        - Say a shell script that makes some calls using the aws api to provision 5 ec2 instances...
    2. Configuration Management Tools (Ansible, Puppet, Chef)
        - Manages the software and configuration of your infrastructure.
    3. Server Templating Tools (AMI)
        - Define your base ami w dependencies which allows you to easily duplicate that template or slighltly modify it!
    4. Orchestration Tools (Kubernetes)
        - Define your application deployment on whatever servers you have provisioned
    5. Provisioning Tools (Terraform!!)
        - Allocates resources within a cloud
        - Cloud Specific: AWS Cloud Formation, Azure Resource Manager
        - Cloud Agnostic (can handle provisioning on any cloud): Terraform, Pulumi, etc


Declarative: Ask for the end state of what you want (5 servers, an s3 bucket, a load balancer, etc) and the tool handles the "nitty-gritty"
Imperative: You tell the system what you want to happen and exactly how you want it to happen



WHAT IS TERRAFORM
Definition: Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently.

BENEFITS
    - Apply software development best practices to infrastructure management.
    - Utilize version control to track infrastructure changes over time.
    - Cloud-agnostic approach allows for compatibility with multiple cloud providers and services.
    - Interact with almost any online service with an API.



INSTALLATION: https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli




The General Sequence of Terraform Commands:
    terraform init: Initializes the working directory, downloading necessary providers and setting up the backend for storing state.
    terraform plan: Compares the desired state (tf config) with the actual state (tf state file). Identifies any discrepancies between the two states. Outputs the differences and the actions needed to reconcile the states (aka the plan).
    terraform apply: BUILDS EVERYTHING! Applies the plan to create, modify, or delete resources as needed to match the desired state. Updates tfstate
    terraform destroy: NUKES EVEYTHING! Removes all resources defined in the configuration, tearing down the infrastructure managed by Terraform.



TERRAFORM TERMS
================
Terraform Core
    - The engine that handles the execution of Terraform's configuration files. It handles resource management, reading the state file, determining the differences between the current and desired state, and making the necessary changes to infrastructure.
Terraform Providers
    - Plugins that interact with APIs of cloud platforms and services (e.g., AWS, Azure, GCP). Providers are responsible for creating, updating, and deleting resources on those platforms as defined in the Terraform configuration.
    - Think of this as a translator between your tf code and the actual resource allocation in your cloud!

.terraform directory
    - Run terraform init to download the necessary providers and store them in the .terraform directory. 
    - Modules (reuseable code bundles) are also stores in .terraform
.terraform.lock.hcl
    - The .terraform.lock.hcl file contains information about the installed dependencies and providers (including exact versions)
terraform.tfstate
    - This JSON file contains information about EVERY resource and data object created/deployed using Terraform. (i.e. tracks the state of your infrastructure)
    - Represents actual state of your infrastructure in the real world!
    - It includes metadata and other essential information about each resource.
    - Contains sensitive info! (e.g. database password)
    - Terraform uses this file and compares to your Terraform config to determine what changes to make during terraform apply.
terraform.tfstate.backup
    - This is a backup of the previous state file. 
    - Terraform creates it before updating terraform.tfstate to ensure you have a recovery point in case the current state file is corrupted or an error occurs during state updates.



Storing the State File:
Local Backend: The state file is stored within the working directory of the project
Remote Backend: The state file is stored in a remote object store or a managed service like Terraform Cloud








VARIABLES:
========================

TYPES OF VARIABLES
    1. Input Variables: 
        - Input variables are like input parameters or arguments for a function. 
        - Defined in variables.tf
        - They are referenced using `var.name`. 
        - Syntax:
            variable "instance_type" {
                type = string
                default = "t2.micro"
            }

    2. Local Variables: 
        - Local variables are like temporary variables within the scope of a function. 
        - Defined in any tf file
        - They are referenced using local.name, and declared with locals (plural). 
        - Syntax:
            locals {
                service_name = "example-service"
                owner = "your_name"
            }

    3. Output Variables: 
    - Output variables are like the return values of a function. 
    - They allow bundling multiple Terraform configurations together. 
    - Syntax:
        output "instance_ip" {
            value = aws_instance.example.public_ip
        }




SETTING INPUT VARIABLES
    1. Terraform CLI prompts during plan/apply: 
        - If you don't specify a variable anywhere and there's no default value, the Terraform CLI will prompt you for a value.
    2. Default value in the block: 
        - You can specify a default value when declaring the variable.
    3. Environment variables: 
        - Use the prefix TF_VAR_ followed by the variable name.
    4. Terraform .tfvars files: 
        - Store values in .tfvars files.
    5. Auto-applied .auto.tfvars files: 
        - These files will be applied over the .tfvars files.
    6. -var or -var-file options: 
        - Pass values when issuing the terraform plan or terraform apply commands.
        - Automatically picked up if named terraform.tfvars or passed with -var-file (e.g., terraform apply -var-file="dev.tfvars")

Variable Value Types
Variables can hold different value types:

Primitive types: string, number, or boolean.
Complex types: lists, sets, maps, etc.
Type checking happens automatically in Terraform. You can also write your own validation rules.



KEY NOTES ON ACTUALLY USING vars
    - variables.tf defines the variables (declaration, type, defaults).
    - .tfvars or similar files provide specific values to these variables (assignment).



HANDLING SENSITIVE DATA
    When using sensitive data in variables, like a database password, add the sensitive = true attribute when defining the variable. This will cause those data to be masked in the Terraform plan output to prevent leaking credentials.

    Also, avoid storing sensitive data in files, and consider using these options for passing in those data:
        - -var command
        - external secret stores like AWS Secrets Manager, Github secrets, or HashiCorp Vault.
        - environment Variables
        OR use a *.tfvars file that is untracked in version control!
